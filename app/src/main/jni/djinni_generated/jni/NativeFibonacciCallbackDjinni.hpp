// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from fibonacci.djinni

#pragma once

#include "djinni_support.hpp"
#include "fibonacci_callback_djinni.hpp"

namespace Fibonacci {

class NativeFibonacciCallbackDjinni final : ::djinni::JniInterface<::Fibonacci::FibonacciCallbackDjinni, NativeFibonacciCallbackDjinni> {
public:
    using CppType = std::shared_ptr<::Fibonacci::FibonacciCallbackDjinni>;
    using JniType = jobject;

    using Boxed = NativeFibonacciCallbackDjinni;

    ~NativeFibonacciCallbackDjinni();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeFibonacciCallbackDjinni>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return {jniEnv, ::djinni::JniClass<NativeFibonacciCallbackDjinni>::get()._toJava(jniEnv, c)}; }

private:
    NativeFibonacciCallbackDjinni();
    friend ::djinni::JniClass<NativeFibonacciCallbackDjinni>;
    friend ::djinni::JniInterface<::Fibonacci::FibonacciCallbackDjinni, NativeFibonacciCallbackDjinni>;

    class JavaProxy final : ::djinni::JavaProxyCacheEntry, public ::Fibonacci::FibonacciCallbackDjinni
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void reportProgress(const std::vector<int64_t> & fibonacciSequenceChunk) override;

    private:
        using ::djinni::JavaProxyCacheEntry::getGlobalRef;
        friend ::djinni::JniInterface<::Fibonacci::FibonacciCallbackDjinni, ::Fibonacci::NativeFibonacciCallbackDjinni>;
        friend ::djinni::JavaProxyCache<JavaProxy>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("ch/fork/djinnisample/djinni_generated/FibonacciCallbackDjinni") };
    const jmethodID method_reportProgress { ::djinni::jniGetMethodID(clazz.get(), "reportProgress", "(Ljava/util/ArrayList;)V") };
};

}  // namespace Fibonacci
